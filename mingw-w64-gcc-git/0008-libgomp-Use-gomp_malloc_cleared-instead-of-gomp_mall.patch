From b64e941c94a777083713996932c91b8bad93df4a Mon Sep 17 00:00:00 2001
From: Kai Tietz <ktietz@redhat.com>
Date: Wed, 5 Aug 2015 18:49:42 +0100
Subject: [PATCH 08/20] libgomp: Use gomp_malloc_cleared instead of gomp_malloc
 [deprecated]

This was added when trying to track down a problem in Blender,
but the actual problem turned out not to be related, so this
is probably not needed.
---
 libgomp/team.c                       | 4 ++--
 libgomp/testsuite/config/default.exp | 5 +++++
 libgomp/work.c                       | 4 ++--
 3 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/libgomp/team.c b/libgomp/team.c
index 7671b05..f9024c0 100644
--- a/libgomp/team.c
+++ b/libgomp/team.c
@@ -224,7 +224,7 @@ free_team (struct gomp_team *team)
 static struct gomp_thread_pool *gomp_new_thread_pool (void)
 {
   struct gomp_thread_pool *pool
-    = gomp_malloc (sizeof(struct gomp_thread_pool));
+    = gomp_malloc_cleared (sizeof(struct gomp_thread_pool));
   pool->threads = NULL;
   pool->threads_size = 0;
   pool->threads_used = 0;
@@ -964,7 +964,7 @@ struct gomp_task_icv *
 gomp_new_icv (void)
 {
   struct gomp_thread *thr = gomp_thread ();
-  struct gomp_task *task = gomp_malloc (sizeof (struct gomp_task));
+  struct gomp_task *task = gomp_malloc_cleared (sizeof (struct gomp_task));
   gomp_init_task (task, NULL, &gomp_global_icv);
   thr->task = task;
   pthread_setspecific (gomp_thread_destructor, thr);
diff --git a/libgomp/testsuite/config/default.exp b/libgomp/testsuite/config/default.exp
index 7f82b4d..7febdea 100644
--- a/libgomp/testsuite/config/default.exp
+++ b/libgomp/testsuite/config/default.exp
@@ -15,3 +15,8 @@
 # <http://www.gnu.org/licenses/>.
 
 load_lib "standard.exp"
+
+# Support for old dejagnu.  Must be loaded here, not in libstdc++.exp, to
+# make sure all existing procs are loaded when their presence is tested.
+load_file $srcdir/../../gcc/testsuite/lib/dejapatches.exp
+
diff --git a/libgomp/work.c b/libgomp/work.c
index 0570b90..741599a 100644
--- a/libgomp/work.c
+++ b/libgomp/work.c
@@ -76,7 +76,7 @@ alloc_work_share (struct gomp_team *team)
 #endif
 
   team->work_share_chunk *= 2;
-  ws = gomp_malloc (team->work_share_chunk * sizeof (struct gomp_work_share));
+  ws = gomp_malloc_cleared (team->work_share_chunk * sizeof (struct gomp_work_share));
   ws->next_alloc = team->work_shares[0].next_alloc;
   team->work_shares[0].next_alloc = ws;
   team->work_share_list_alloc = &ws[1];
@@ -175,7 +175,7 @@ gomp_work_share_start (bool ordered)
   /* Work sharing constructs can be orphaned.  */
   if (team == NULL)
     {
-      ws = gomp_malloc (sizeof (*ws));
+      ws = gomp_malloc_cleared (sizeof (*ws));
       gomp_init_work_share (ws, ordered, 1);
       thr->ts.work_share = ws;
       return ws;
-- 
2.5.0

