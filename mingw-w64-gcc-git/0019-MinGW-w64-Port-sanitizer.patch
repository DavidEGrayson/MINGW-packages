From 7b251040713e1d684865ebefc752515817fd2a0a Mon Sep 17 00:00:00 2001
From: LRN <lrn1986@gmail.com>
Date: Wed, 5 Aug 2015 19:12:24 +0100
Subject: [PATCH 19/20] MinGW-w64: Port sanitizer

---
 libsanitizer/asan/asan_win.cc                   |  3 ---
 libsanitizer/configure                          | 30 +++++++++++++++++++++++--
 libsanitizer/configure.ac                       |  5 +++--
 libsanitizer/sanitizer_common/sanitizer_libc.cc |  4 ++++
 libsanitizer/ubsan/ubsan_value.h                |  2 +-
 5 files changed, 36 insertions(+), 8 deletions(-)

diff --git a/libsanitizer/asan/asan_win.cc b/libsanitizer/asan/asan_win.cc
index b002876..7b93331 100644
--- a/libsanitizer/asan/asan_win.cc
+++ b/libsanitizer/asan/asan_win.cc
@@ -63,9 +63,6 @@ void MaybeReexec() {
 }
 
 void *AsanDoesNotSupportStaticLinkage() {
-#if defined(_DEBUG)
-#error Please build the runtime with a non-debug CRT: /MD or /MT
-#endif
   return 0;
 }
 
diff --git a/libsanitizer/configure b/libsanitizer/configure
index 809f0d7..75fbc0e 100755
--- a/libsanitizer/configure
+++ b/libsanitizer/configure
@@ -628,6 +628,7 @@ TSAN_SUPPORTED_FALSE
 TSAN_SUPPORTED_TRUE
 enable_static
 enable_shared
+lt_host_flags
 CXXCPP
 OTOOL64
 OTOOL
@@ -15387,6 +15388,31 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
 
 
+
+
+case $host in
+  *-cygwin* | *-mingw*)
+    # 'host' will be top-level target in the case of a target lib,
+    # we must compare to with_cross_host to decide if this is a native
+    # or cross-compiler and select where to install dlls appropriately.
+    if test -n "$with_cross_host" &&
+	test x"$with_cross_host" != x"no"; then
+      lt_host_flags='-no-undefined -bindir "$(toolexeclibdir)"';
+    else
+      lt_host_flags='-no-undefined -bindir "$(bindir)"';
+    fi
+    ;;
+  *)
+    lt_host_flags=
+    ;;
+esac
+
+
+
+
+
+
+
 for ac_prog in gawk mawk nawk awk
 do
   # Extract the first word of "$ac_prog", so it can be a program name with args.
@@ -15514,10 +15540,10 @@ done
 
 
 # Common libraries that we need to link against for all sanitizer libs.
-link_sanitizer_common='-lpthread -ldl -lm'
+link_sanitizer_common="-lpthread      -lm $lt_host_flags"
 
 # Set up the set of additional libraries that we need to link against for libasan.
-link_libasan=$link_sanitizer_common
+link_libasan="$link_sanitizer_common -ldbghelp"
 
 
 # Set up the set of additional libraries that we need to link against for libtsan.
diff --git a/libsanitizer/configure.ac b/libsanitizer/configure.ac
index 11e2d99..18967fe 100644
--- a/libsanitizer/configure.ac
+++ b/libsanitizer/configure.ac
@@ -74,6 +74,7 @@ case "$AWK" in
 "") AC_MSG_ERROR([can't build without awk]) ;;
 esac
 
+ACX_LT_HOST_FLAGS
 AC_SUBST(enable_shared)
 AC_SUBST(enable_static)
 
@@ -96,10 +97,10 @@ AM_CONDITIONAL(LSAN_SUPPORTED, [test "x$LSAN_SUPPORTED" = "xyes"])
 AC_CHECK_FUNCS(clock_getres clock_gettime clock_settime)
 
 # Common libraries that we need to link against for all sanitizer libs.
-link_sanitizer_common='-lpthread -ldl -lm'
+link_sanitizer_common="-lpthread      -lm $lt_host_flags"
 
 # Set up the set of additional libraries that we need to link against for libasan.
-link_libasan=$link_sanitizer_common
+link_libasan="$link_sanitizer_common -ldbghelp"
 AC_SUBST(link_libasan)
 
 # Set up the set of additional libraries that we need to link against for libtsan.
diff --git a/libsanitizer/sanitizer_common/sanitizer_libc.cc b/libsanitizer/sanitizer_common/sanitizer_libc.cc
index c13a66d..3ad62d9 100644
--- a/libsanitizer/sanitizer_common/sanitizer_libc.cc
+++ b/libsanitizer/sanitizer_common/sanitizer_libc.cc
@@ -18,7 +18,11 @@ namespace __sanitizer {
 static inline void break_optimization(void *arg) {
 #if _MSC_VER
   // FIXME: make sure this is actually enough.
+#  ifdef __GNUC__
+  __asm__ __volatile__("" : : "r" (arg) : "memory");
+#  else
   __asm;
+#  endif
 #else
   __asm__ __volatile__("" : : "r" (arg) : "memory");
 #endif
diff --git a/libsanitizer/ubsan/ubsan_value.h b/libsanitizer/ubsan/ubsan_value.h
index abfd31f..e1fa725 100644
--- a/libsanitizer/ubsan/ubsan_value.h
+++ b/libsanitizer/ubsan/ubsan_value.h
@@ -14,7 +14,7 @@
 
 // For now, only support Linux, FreeBSD and Darwin. Other platforms should
 // be easy to add, and probably work as-is.
-#if !defined(__linux__) && !defined(__FreeBSD__) && !defined(__APPLE__)
+#if !defined(__linux__) && !defined(__FreeBSD__) && !defined(__APPLE__) && !defined(_WIN32)
 #error "UBSan not supported for this platform!"
 #endif
 
-- 
2.5.0

